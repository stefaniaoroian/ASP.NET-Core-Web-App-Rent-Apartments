// <auto-generated />
using System;
using Apartments.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Apartments.Migrations
{
    [DbContext(typeof(ApartmentsContext))]
    [Migration("20221219153055_Apartments")]
    partial class Apartments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Apartments.Models.Agent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AgentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("Apartments.Models.Apartment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("AgentID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OwnerID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ID");

                    b.HasIndex("AgentID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Apartment");
                });

            modelBuilder.Entity("Apartments.Models.ApartmentCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ApartmentID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ApartmentCategory");
                });

            modelBuilder.Entity("Apartments.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Apartments.Models.Client", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Adress")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Apartments.Models.Owner", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Owner");
                });

            modelBuilder.Entity("Apartments.Models.Rental", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("ApartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("ClientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ApartmentID");

                    b.HasIndex("ClientID");

                    b.ToTable("Rental");
                });

            modelBuilder.Entity("Apartments.Models.Apartment", b =>
                {
                    b.HasOne("Apartments.Models.Agent", "Agent")
                        .WithMany("Apartments")
                        .HasForeignKey("AgentID");

                    b.HasOne("Apartments.Models.Category", null)
                        .WithMany("Apartments")
                        .HasForeignKey("CategoryID");

                    b.HasOne("Apartments.Models.Owner", "Owner")
                        .WithMany("Apartments")
                        .HasForeignKey("OwnerID");

                    b.Navigation("Agent");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Apartments.Models.ApartmentCategory", b =>
                {
                    b.HasOne("Apartments.Models.Apartment", "Apartment")
                        .WithMany("ApartmentCategories")
                        .HasForeignKey("ApartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apartments.Models.Category", "Category")
                        .WithMany("ApartmentCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Apartments.Models.Rental", b =>
                {
                    b.HasOne("Apartments.Models.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentID");

                    b.HasOne("Apartments.Models.Client", "Client")
                        .WithMany("Rentals")
                        .HasForeignKey("ClientID");

                    b.Navigation("Apartment");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Apartments.Models.Agent", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("Apartments.Models.Apartment", b =>
                {
                    b.Navigation("ApartmentCategories");
                });

            modelBuilder.Entity("Apartments.Models.Category", b =>
                {
                    b.Navigation("ApartmentCategories");

                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("Apartments.Models.Client", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("Apartments.Models.Owner", b =>
                {
                    b.Navigation("Apartments");
                });
#pragma warning restore 612, 618
        }
    }
}
